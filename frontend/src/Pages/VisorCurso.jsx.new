import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { FaArrowLeft, FaLightbulb, FaEdit, FaDownload, FaStar, FaShare, FaLock, FaCheck, FaPlay } from 'react-icons/fa';
import ProgresoModulos from '../components/Curso/ProgresoModulos';
import ReproductorVideo from '../components/Curso/ReproductorVideo';
import axios from 'axios';

const VisorCurso = () => {
  const { cursoId } = useParams();
  const navigate = useNavigate();
  
  const [curso, setCurso] = useState(null);
  const [cargando, setCargando] = useState(true);
  const [leccionActual, setLeccionActual] = useState(null);
  const [moduloActual, setModuloActual] = useState(null);
  const [pestanaActiva, setPestanaActiva] = useState('contenido');
  const [mensaje, setMensaje] = useState(null);
  const [haComprado, setHaComprado] = useState(false);
  
  useEffect(() => {
    comprobarSesion();
    verificarInscripcion();
    obtenerDatosCurso();
  }, [cursoId, navigate]);
  
  const comprobarSesion = async () => {
    try {
      const respuesta = await axios.get(
        'http://localhost/TFG_DAW/backend/controlador/controlador.php?action=comprobarSesion',
        { withCredentials: true }
      );
      
      if (!respuesta.data || !respuesta.data.username) {
        // Si no hay sesión iniciada, redirigir al login
        navigate('/login', { state: { returnUrl: `/curso-visor/${cursoId}` } });
      }
    } catch (error) {
      console.error('Error al comprobar sesión:', error);
      setMensaje({
        tipo: 'error',
        texto: 'Es necesario iniciar sesión para acceder al curso'
      });
    }
  };
  
  const verificarInscripcion = async () => {
    try {
      const response = await axios.get(
        'http://localhost/TFG_DAW/backend/controlador/controlador.php?action=obtenerMisCursos',
        { withCredentials: true }
      );
      
      if (response.data && !response.data.error) {
        const estaInscrito = response.data.some(curso => curso.id == cursoId);
        setHaComprado(estaInscrito);
        
        if (!estaInscrito) {
          setMensaje({
            tipo: 'advertencia',
            texto: 'No estás inscrito en este curso. Algunas secciones estarán bloqueadas.'
          });
        }
      }
    } catch (error) {
      console.error('Error al verificar inscripción:', error);
    }
  };
  
  const obtenerDatosCurso = async () => {
    try {
      setCargando(true);
      
      // Obtener datos del curso desde la API
      const identifier = new FormData();
      identifier.append('id', cursoId);
      const response = await axios.post(
        `http://localhost/TFG_DAW/backend/controlador/controlador.php?action=obtenerCurso`,
        identifier,
        { withCredentials: true }
      );
      
      if (response.data) {
        // Crear datos estructurados del curso con la información recibida
        const cursoData = {
          id: response.data.id,
          titulo: response.data.titulo,
          descripcion: response.data.descripcion,
          instructor: {
            id: 1,
            nombre: response.data.profesor,
            avatar: 'https://i.pravatar.cc/150?img=37',
            rol: 'Instructor'
          },
          precio: response.data.precio,
          valoracion: 4.8,
          numValoraciones: 125,
          fechaActualizacion: '2025-05-16',
          modulos: [
            {
              id: 1,
              titulo: 'Introducción al curso',
              completado: true,
              progreso: 100,
              lecciones: [
                { id: 1, titulo: 'Bienvenida y presentación', duracion: '05:30', completada: true },
                { id: 2, titulo: 'Requisitos previos', duracion: '08:45', completada: true },
                { id: 3, titulo: 'Configuración del entorno', duracion: '12:20', completada: true }
              ]
            },
            {
              id: 2,
              titulo: 'Fundamentos básicos',
              completado: true,
              progreso: 100,
              lecciones: [
                { id: 4, titulo: 'Conceptos fundamentales', duracion: '15:10', completada: true },
                { id: 5, titulo: 'Primeros ejemplos prácticos', duracion: '18:30', completada: true },
                { id: 6, titulo: 'Ejercicios guiados', duracion: '22:15', completada: true }
              ]
            },
            {
              id: 3,
              titulo: 'Técnicas avanzadas',
              completado: false,
              progreso: 33,
              lecciones: [
                { id: 7, titulo: 'Patrones avanzados', duracion: '20:45', completada: true },
                { id: 8, titulo: 'Optimización y buenas prácticas', duracion: '25:30', completada: false },
                { id: 9, titulo: 'Casos de estudio reales', duracion: '30:00', completada: false }
              ]
            },
            {
              id: 4,
              titulo: 'Proyecto final',
              completado: false,
              progreso: 0,
              bloqueado: !haComprado,
              lecciones: [
                { 
                  id: 10, 
                  titulo: 'Planificación del proyecto', 
                  duracion: '15:20', 
                  completada: false, 
                  bloqueada: !haComprado 
                },
                { 
                  id: 11, 
                  titulo: 'Desarrollo guiado', 
                  duracion: '35:45', 
                  completada: false, 
                  bloqueada: !haComprado 
                },
                { 
                  id: 12, 
                  titulo: 'Pruebas y despliegue', 
                  duracion: '25:10', 
                  completada: false, 
                  bloqueada: !haComprado 
                }
              ]
            }
          ],
          recursos: [
            { 
              id: 1, 
              titulo: 'Documentación de referencia', 
              tipo: 'pdf', 
              tamano: '2.4 MB',
              bloqueado: !haComprado
            },
            { 
              id: 2, 
              titulo: 'Código fuente de ejemplos', 
              tipo: 'zip', 
              tamano: '4.8 MB',
              bloqueado: !haComprado
            },
            { 
              id: 3, 
              titulo: 'Plantillas de proyecto', 
              tipo: 'zip', 
              tamano: '1.7 MB',
              bloqueado: false
            }
          ],
          preguntas: [
            { 
              id: 1, 
              usuario: 'Carlos R.', 
              fecha: '2025-05-01', 
              texto: '¿Hay algún requisito específico para seguir este curso?',
              respuesta: 'Solo necesitas conocimientos básicos de programación y una computadora con conexión a internet.',
              avatarUsuario: 'https://i.pravatar.cc/150?img=68'
            },
            { 
              id: 2, 
              usuario: 'Laura M.', 
              fecha: '2025-04-28', 
              texto: '¿Se incluye soporte tras finalizar el curso?',
              respuesta: 'Ofrecemos soporte durante 3 meses después de la compra del curso para resolver dudas.',
              avatarUsuario: 'https://i.pravatar.cc/150?img=47'
            },
            { 
              id: 3, 
              usuario: 'Miguel P.', 
              fecha: '2025-04-15', 
              texto: '¿El certificado tiene alguna acreditación oficial?',
              respuesta: 'Nuestro certificado demuestra la finalización del curso pero no está acreditado por ninguna institución educativa oficial.',
              avatarUsuario: 'https://i.pravatar.cc/150?img=12'
            }
          ]
        };
        
        setCurso(cursoData);
        
        // Iniciar con la primera lección del primer módulo
        if (cursoData.modulos.length > 0 && cursoData.modulos[0].lecciones.length > 0) {
          setModuloActual(cursoData.modulos[0]);
          setLeccionActual(cursoData.modulos[0].lecciones[0]);
        }
      } else {
        setMensaje({
          tipo: 'error',
          texto: 'No se encontró información del curso'
        });
      }
    } catch (error) {
      console.error('Error al obtener curso:', error);
      setMensaje({
        tipo: 'error',
        texto: 'Error al cargar el curso'
      });
    } finally {
      setCargando(false);
    }
  };
    
  const handleSeleccionLeccion = (modulo, leccion) => {
    // Si la lección está bloqueada y el usuario no ha comprado, mostrar mensaje
    if (leccion.bloqueada && !haComprado) {
      setMensaje({
        tipo: 'info',
        texto: 'Necesitas inscribirte en el curso para acceder a esta lección'
      });
      return;
    }
    
    setModuloActual(modulo);
    setLeccionActual(leccion);
    // Scrollear al reproductor de video
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };
  
  const handleCambiarPestana = (pestana) => {
    setPestanaActiva(pestana);
  };
  
  const handleComprarCurso = () => {
    navigate(`/pago/${cursoId}`);
  };
  
  const handleMarcarCompletada = (leccionId) => {
    if (!haComprado) {
      setMensaje({
        tipo: 'info',
        texto: 'Necesitas inscribirte en el curso para marcar lecciones como completadas'
      });
      return;
    }
    
    // Actualizar el estado local
    // En producción, esto enviaría una petición al servidor
    setCurso(prevCurso => {
      const nuevoCurso = { ...prevCurso };
      const todosModulos = [...nuevoCurso.modulos];
      
      // Encontrar la lección y marcarla como completada
      for (let i = 0; i < todosModulos.length; i++) {
        const modulo = todosModulos[i];
        const leccionIndex = modulo.lecciones.findIndex(l => l.id === leccionId);
        
        if (leccionIndex >= 0) {
          // Actualizar la lección
          modulo.lecciones[leccionIndex].completada = true;
          
          // Actualizar el progreso del módulo
          const leccionesCompletadas = modulo.lecciones.filter(l => l.completada).length;
          modulo.progreso = Math.round((leccionesCompletadas / modulo.lecciones.length) * 100);
          modulo.completado = modulo.progreso === 100;
          
          break;
        }
      }
      
      nuevoCurso.modulos = todosModulos;
      return nuevoCurso;
    });
    
    // Mostrar mensaje de éxito
    setMensaje({
      tipo: 'exito',
      texto: '¡Lección marcada como completada!'
    });
  };
  
  // Renderizar estado de carga
  if (cargando) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center pt-20">
        <div className="text-center flex flex-col items-center">
          <div className="w-16 h-16 border-4 border-t-purple-600 border-r-pink-600 border-b-purple-600 border-l-pink-600 border-solid rounded-full animate-spin"></div>
          <p className="mt-4 text-gray-300">Cargando curso...</p>
        </div>
      </div>
    );
  }
  
  // Renderizar error si no hay datos del curso
  if (!curso) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center pt-20">
        <div className="bg-gray-800/50 backdrop-blur-sm rounded-2xl p-8 max-w-md w-full border border-gray-700/50 text-center">
          <div className="text-red-500 text-5xl mb-4">
            <span role="img" aria-label="Error">⚠️</span>
          </div>
          <h2 className="text-xl font-bold text-white mb-4">No se pudo cargar el curso</h2>
          <p className="text-gray-300 mb-6">{mensaje?.texto || 'Ha ocurrido un error al cargar el curso'}</p>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => navigate('/cursos')}
            className="px-6 py-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl font-semibold hover:shadow-lg hover:shadow-purple-500/20 transition-all"
          >
            Volver a Cursos
          </motion.button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-900 pt-20">
      {/* Navbar superior */}
      <div className="bg-gray-900/90 backdrop-blur-sm border-b border-gray-800 sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 py-4 flex justify-between items-center">
          <div className="flex items-center">
            <button 
              onClick={() => navigate('/cursos')}
              className="text-white hover:text-purple-400 mr-4 transition-colors"
            >
              <FaArrowLeft size={20} />
            </button>
            <h1 className="text-lg sm:text-xl font-bold truncate max-w-[250px] sm:max-w-md">
              <span className="bg-gradient-to-r from-purple-400 to-pink-600 bg-clip-text text-transparent">
                {curso.titulo}
              </span>
            </h1>
          </div>
          
          <div className="flex items-center space-x-2">
            {!haComprado && (
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleComprarCurso}
                className="flex items-center px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl font-semibold text-sm hover:shadow-lg hover:shadow-purple-500/20 transition-all"
              >
                Inscribirse ({curso.precio}€)
              </motion.button>
            )}
            {haComprado && (
              <div className="flex items-center px-4 py-2 bg-green-600/20 text-green-400 rounded-xl font-semibold text-sm border border-green-500/30">
                <FaCheck className="mr-2" size={14} /> Inscrito
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Mensaje de estado */}
      <AnimatePresence>
        {mensaje && (
          <motion.div 
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className={`mx-auto max-w-4xl mt-4 px-4 ${mensaje.tipo === 'error' ? 'bg-red-500/10 border-red-500/30 text-red-300' : mensaje.tipo === 'exito' ? 'bg-green-500/10 border-green-500/30 text-green-300' : mensaje.tipo === 'advertencia' ? 'bg-yellow-500/10 border-yellow-500/30 text-yellow-300' : 'bg-blue-500/10 border-blue-500/30 text-blue-300'} border rounded-xl p-4 flex items-start`}
          >
            <div className="flex-shrink-0 mr-3">
              {mensaje.tipo === 'error' && <span className="text-xl">⚠️</span>}
              {mensaje.tipo === 'exito' && <FaCheck />}
              {mensaje.tipo === 'advertencia' && <span className="text-xl">⚠️</span>}
              {mensaje.tipo === 'info' && <FaLightbulb />}
            </div>
            <div className="flex-1">
              <p>{mensaje.texto}</p>
            </div>
            <button 
              onClick={() => setMensaje(null)}
              className="ml-auto flex-shrink-0 text-gray-400 hover:text-white"
            >
              ×
            </button>
          </motion.div>
        )}
      </AnimatePresence>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Columna izquierda: Reproductor de video y pestañas */}
          <div className="lg:col-span-2">
            {/* Reproductor de video */}
            <div className="mb-6 bg-gray-800 rounded-2xl overflow-hidden border border-gray-700/50">
              {leccionActual && (
                <ReproductorVideo 
                  videoUrl="https://www.youtube.com/embed/dQw4w9WgXcQ" 
                  titulo={leccionActual.titulo}
                  bloqueado={leccionActual.bloqueada && !haComprado}
                />
              )}
            </div>
            
            {/* Pestañas de contenido */}
            <div className="bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/50">
              <div className="flex border-b border-gray-700 mb-6">
                <button
                  onClick={() => handleCambiarPestana('contenido')}
                  className={`px-4 py-3 font-medium transition-colors ${pestanaActiva === 'contenido' ? 'border-b-2 border-purple-500 text-white' : 'text-gray-400 hover:text-gray-300'}`}
                >
                  Contenido
                </button>
                <button
                  onClick={() => handleCambiarPestana('recursos')}
                  className={`px-4 py-3 font-medium transition-colors ${pestanaActiva === 'recursos' ? 'border-b-2 border-purple-500 text-white' : 'text-gray-400 hover:text-gray-300'}`}
                >
                  Recursos
                </button>
                <button
                  onClick={() => handleCambiarPestana('preguntas')}
                  className={`px-4 py-3 font-medium transition-colors ${pestanaActiva === 'preguntas' ? 'border-b-2 border-purple-500 text-white' : 'text-gray-400 hover:text-gray-300'}`}
                >
                  Preguntas
                </button>
              </div>
              
              {/* Contenido de las pestañas */}
              {pestanaActiva === 'contenido' && (
                <div>
                  <h2 className="text-xl font-bold text-white mb-2">
                    Acerca de este curso
                  </h2>
                  <p className="text-gray-300 mb-6">
                    {curso.descripcion}
                  </p>
                  
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
                    <div className="bg-gray-700/30 rounded-xl p-4">
                      <p className="text-sm text-gray-400 mb-1">Instructor</p>
                      <div className="flex items-center">
                        <img 
                          src={curso.instructor.avatar} 
                          alt={curso.instructor.nombre}
                          className="w-10 h-10 rounded-full mr-3" 
                        />
                        <div>
                          <p className="text-white font-medium">{curso.instructor.nombre}</p>
                          <p className="text-sm text-gray-400">{curso.instructor.rol}</p>
                        </div>
                      </div>
                    </div>
                    <div className="bg-gray-700/30 rounded-xl p-4">
                      <p className="text-sm text-gray-400 mb-1">Valoración</p>
                      <div className="flex items-center">
                        <div className="flex text-yellow-400 mr-2">
                          {[...Array(5)].map((_, index) => (
                            <FaStar 
                              key={index}
                              className={index < Math.floor(curso.valoracion) ? 'text-yellow-400' : 'text-gray-600'}
                              size={16}
                            />
                          ))}
                        </div>
                        <p className="text-white font-medium">{curso.valoracion}</p>
                        <p className="text-sm text-gray-400 ml-2">({curso.numValoraciones} valoraciones)</p>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              {pestanaActiva === 'recursos' && (
                <div>
                  <h2 className="text-xl font-bold text-white mb-4">
                    Recursos del curso
                  </h2>
                  <div className="space-y-3">
                    {curso.recursos.map(recurso => (
                      <div 
                        key={recurso.id}
                        className={`p-4 rounded-xl ${recurso.bloqueado ? 'bg-gray-800/50' : 'bg-gray-700/30'} flex items-center justify-between`}
                      >
                        <div className="flex items-center">
                          <div className="mr-3">
                            {recurso.tipo === 'pdf' && <FaDownload className="text-purple-400" size={18} />}
                            {recurso.tipo === 'zip' && <FaDownload className="text-blue-400" size={18} />}
                          </div>
                          <div>
                            <p className={`font-medium ${recurso.bloqueado ? 'text-gray-500' : 'text-white'}`}>
                              {recurso.titulo}
                            </p>
                            <p className="text-sm text-gray-400">{recurso.tamano}</p>
                          </div>
                        </div>
                        
                        {recurso.bloqueado ? (
                          <div className="text-gray-500 flex items-center">
                            <FaLock size={14} className="mr-2" />
                            Bloqueado
                          </div>
                        ) : (
                          <motion.button
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            className="px-3 py-1 bg-gray-700 text-white text-sm rounded-lg hover:bg-gray-600 transition-colors"
                          >
                            Descargar
                          </motion.button>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {pestanaActiva === 'preguntas' && (
                <div>
                  <h2 className="text-xl font-bold text-white mb-4">
                    Preguntas frecuentes
                  </h2>
                  <div className="space-y-6">
                    {curso.preguntas.map(pregunta => (
                      <div key={pregunta.id} className="border-b border-gray-700 pb-6 last:border-b-0 last:pb-0">
                        <div className="flex items-start mb-3">
                          <img 
                            src={pregunta.avatarUsuario} 
                            alt={pregunta.usuario}
                            className="w-8 h-8 rounded-full mr-3" 
                          />
                          <div>
                            <p className="text-white font-medium">{pregunta.usuario}</p>
                            <p className="text-xs text-gray-400">{pregunta.fecha}</p>
                          </div>
                        </div>
                        <p className="text-gray-200 mb-3">{pregunta.texto}</p>
                        <div className="bg-gray-700/30 rounded-xl p-4 ml-6">
                          <p className="text-gray-300">{pregunta.respuesta}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
          
          {/* Columna derecha: Progreso del curso */}
          <div className="lg:sticky lg:top-24 self-start">
            <div className="bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/50">
              <h2 className="text-xl font-bold text-white mb-6">Contenido del curso</h2>
              
              <ProgresoModulos 
                modulos={curso.modulos}
                moduloActual={moduloActual}
                leccionActual={leccionActual}
                onSeleccionarLeccion={handleSeleccionLeccion}
                haComprado={haComprado}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VisorCurso;
